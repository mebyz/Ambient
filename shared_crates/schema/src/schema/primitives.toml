
[components."core::primitives"]
name = "Primitives"
description = "Components that create primitive (in the geometric sense) objects from their attached entities."

[components."core::primitives::cube"]
type = "Empty"
name = "Cube"
description = """
If attached to an entity, the entity will be converted to a cube primitive.
The cube is unit-sized (i.e. 0.5 metres out to each side)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::quad"]
type = "Empty"
name = "Quad"
description = """
If attached to an entity, the entity will be converted to a quad primitive.
The quad is unit-sized on the XY axes, and flat on the Z axis (i.e. 0.5 metres out to the XY axes)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::sphere"]
type = "Empty"
name = "Sphere"
description = """
If attached to an entity alongside the other `sphere_*` components, the entity will be converted to a sphere primitive.
To easily instantiate a unit-diameter `sphere`, consider using the `sphere` concept (e.g. `make_sphere`)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::sphere_radius"]
type = "F32"
name = "Sphere radius"
description = "Set the radius of a `sphere` entity."
default = 0.5
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::sphere_sectors"]
type = "U32"
name = "Sphere sectors"
description = "Set the longitudinal sectors of a `sphere` entity."
default = 36
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::sphere_stacks"]
type = "U32"
name = "Sphere stacks"
description = "Set the latitudinal stacks of a `sphere` entity."
default = 18
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::star"]
type = "Empty"
name = "Star"
description = """
If attached to an entity alongside the other `star_*` components, the entity will be converted to a star primitive.
To easily instantiate a default `star`, consider using the `star` concept (e.g. `make_star`)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::star_inner_radius"]
type = "F32"
name = "Star inner radius"
description = "Set the inner radius of a `star` entity"
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::star_outer_radius"]
type = "F32"
name = "Star outer radius"
description = "Set the outer radius of a `star` entity"
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::star_width"]
type = "F32"
name = "Star width"
description = "Set the width of a `star` entity, spanning X-plane."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::star_spikes_number"]
type = "U32"
name = "Star spikes number"
description = "Set the spikes number of a `star` entity"
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::torus"]
type = "Empty"
name = "Torus"
description = """
If attached to an entity alongside the other `torus_*` components, the entity will be converted to a torus primitive.
To easily instantiate a default `torus`, consider using the `torus` concept (e.g. `make_torus`)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::torus_inner_radius"]
type = "F32"
name = "Torus inner radius"
description = "Set the inner radius of a `torus` entity, spanning XY-plane."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::torus_outer_radius"]
type = "F32"
name = "Torus outer radius"
description = "Set the outer radius of a `torus` entity, spanning XY-plane."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::torus_loops"]
type = "U32"
name = "Torus loops"
description = "Set the loops of a `torus` entity, spanning XY-plane."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::torus_slices"]
type = "U32"
name = "Torus slices"
description = "Set the slices of a `torus` entity, spanning XY-plane."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::capsule"]
type = "Empty"
name = "Capsule"
description = """
If attached to an entity alongside the other `capsule_*` components, the entity will be converted to a capsule primitive.
To easily instantiate a default `capsule`, consider using the `capsule` concept (e.g. `make_capsule`)."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::capsule_radius"]
type = "F32"
name = "Capsule radius"
description = "Set the radius of a `capsule` entity, spanning XY-plane."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::capsule_half_height"]
type = "F32"
name = "Capsule half-height"
description = "Set the half-height of the `capsule` entity, spanning Z-axis, excluding the caps."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::capsule_rings"]
type = "U32"
name = "Capsule rings"
description = "Set the number of sections between the caps."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::capsule_latitudes"]
type = "U32"
name = "Capsule latitudes"
description = "Set the number of latitudinal sections. Should be even."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::primitives::capsule_longitudes"]
type = "U32"
name = "Capsule longitudes"
description = "Set the number of longitudinal sections."
attributes = ["Debuggable", "Networked", "Store"]

# TODO: enums are not supported, see https://github.com/AmbientRun/Ambient/issues/221.
# [components."core::primitives::capsule_uv_profile"]
# type = "???"
# name = "Capsule UV profile"
# description = "Specifies vertical UV distribution."
# attributes = ["Debuggable", "Networked", "Store"]

# Concepts

[concepts.sphere]
name = "Sphere"
description = "A primitive sphere."

[concepts.sphere.components]
"core::primitives::sphere" = {}
"core::primitives::sphere_radius" = 0.5
"core::primitives::sphere_sectors" = 36
"core::primitives::sphere_stacks" = 18

[concepts.capsule]
name = "Capsule"
description = "A primitive capsule. Defined as a cylinder capped by hemispheres."

[concepts.capsule.components]
"core::primitives::capsule" = {}
"core::primitives::capsule_radius" = 0.5
"core::primitives::capsule_half_height" = 0.5
"core::primitives::capsule_rings" = 0
"core::primitives::capsule_latitudes" = 16
"core::primitives::capsule_longitudes" = 32

[concepts.torus]
name = "Torus"
description = "A primitive Torus, surface of revolution generated by revolving a circle in three-dimensional space one full revolution."

[concepts.torus.components]
"core::primitives::torus" = {}
"core::primitives::torus_inner_radius" = 0.25
"core::primitives::torus_outer_radius" = 0.35
"core::primitives::torus_slices" = 32
"core::primitives::torus_loops" = 16

[concepts.star]
name = "Star"
description = "A primitive Star, a type of non-convex polygon."

[concepts.star.components]
"core::primitives::star" = {}
"core::primitives::star_inner_radius" = 0.25
"core::primitives::star_outer_radius" = 0.35
"core::primitives::star_width" = 5.0
"core::primitives::star_spikes_number" = 5